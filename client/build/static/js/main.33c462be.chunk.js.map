{"version":3,"sources":["lib/styles/palette.js","components/common/Button.js","components/common/Responsive.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","components/common/HeaderContainer.js","components/common/PageNumber.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","modules/write.js","components/write/Editor.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","modules/comment.js","components/comment/CommentActionButton.js","modules/comments.js","containers/comment/CommentActionButtonsContiner.js","components/comment/Editor.js","containers/comment/EditorContainer.js","components/comments/CommentList.js","containers/post/CommentListContainer.js","components/post/PostViewer.js","modules/post.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["palette","gray","cyan","StyledButton","styled","button","props","fullWidth","css","withRouter","to","history","rest","onClick","e","push","ResponsiveBlock","div","Responsive","children","HeaderBlock","Wrapper","Spacer","UserInfoBlock","UserInfo","username","Header","user","onLogout","className","client","axios","create","logout","post","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","userSaga","logoutSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","takeLatest","checkFailureSaga","authAPI","localStorage","removeItem","console","log","checkError","HeaderContainer","useSelector","dispatch","useDispatch","StyledPageNumber","currentPage","PaginationBlock","buildLink","tag","page","query","qs","stringify","Pagination","lastPage","disabled","undefined","Array","map","n","index","pageIndex","Math","ceil","location","posts","parse","search","ignoreQueryPrefix","parseInt","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","listPostsSaga","queryString","headers","match","useEffect","params","PostListPage","PostListContainer","AuthTemplateBlock","WhiteBox","AuthTempleate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","register","password","login","registerSaga","loginSaga","initalizeForm","initialState","passwordConfirm","auth","produce","draft","authError","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","Button","ErrorMessage","textMap","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","useState","setError","setItem","JSON","target","preventDefault","LoginPage","AuthTemplate","status","includes","RegisterPage","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","SET_ORIGINAL_POST","initialize","writePost","updatePost","id","setOriginalPost","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","font","size","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","commentSaga","COMMENT_POST","COMMENT_POST_SUCCESS","COMMENT_POST_FAILURE","commentPost","postId","commentPostSaga","comment","CommentActionButtonsContinerBlock","CommentActionButton","isLogin","commentsSaga","COMMENTS_READ","COMMENTS_READ_SUCCESS","COMMENTS_READ_FAILURE","commentsRead","commentsReadSaga","comments","CommentActionButtonsContiner","CommentListBlock","CommentItemBlock","CommentContent","CommentItem","dangerouslySetInnerHTML","__html","CommentList","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","a","delete","ownPost","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33c462be.chunk.js","sourcesContent":["const palette = {\r\n    gray: [\r\n        '#f8f9fa',\r\n        '#f1f3f5',\r\n        '#e9ecef',\r\n        '#dee2e6',\r\n        '#ced4da',\r\n        '#adb5bd',\r\n        '#868e96',\r\n        '#495057',\r\n        '#343a40',\r\n        '#212529',\r\n    ],\r\n    cyan: [\r\n        '#e3fafc',\r\n        '#c5f6fa',\r\n        '#99e9f2',\r\n        '#66d9e8',\r\n        '#3bc9db',\r\n        '#22b8cf',\r\n        '#15aabf',\r\n        '#1098ad',\r\n        '#0c8599',\r\n        '#0b7285',\r\n    ],\r\n}\r\n\r\nexport default palette","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport palette from '../../lib/styles/palette'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst StyledButton = styled.button `\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    padding: 0.25rem 1rem;\r\n    color: white;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    background: ${palette.gray[8]};\r\n    &:hover {\r\n        background: ${palette.gray[6]};\r\n    }\r\n\r\n    &:disabled {\r\n        background: ${palette.gray[3]};\r\n        color: ${palette.gray[5]};\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    ${props =>\r\n        props.fullWidth &&\r\n        css`\r\n            padding-top: 0.75rem;\r\n            padding-bottom: 0.75rem;\r\n            width: 100%;\r\n            font-size: 1.125rem;\r\n        `}\r\n    ${props => \r\n        props.cyan &&\r\n        css`\r\n            background: ${palette.cyan[5]};\r\n            &:hover{\r\n                background: ${palette.cyan[4]};\r\n            }\r\n        `\r\n    }\r\n`\r\n\r\nconst Button = ({to, history, ...rest }) =>{\r\n    const onClick = e => {\r\n        //to가 있다면 to로 페이지 이동\r\n        if(to){\r\n            history.push(to)\r\n        }\r\n        if(rest.onClick){\r\n            rest.onClick(e)\r\n        }\r\n    }\r\n    return <StyledButton {...rest} onClick={onClick} />\r\n}\r\n\r\n\r\nexport default withRouter(Button)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\n const ResponsiveBlock = styled.div`\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    width: 1024px;\r\n    margin: 0 auto; /* 중앙정렬 */\r\n\r\n    @media (max-width: 1024px){\r\n        width: 768px;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n `\r\n\r\n const Responsive = ({children, ...rest}) => {\r\n     //style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n     // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n    return (\r\n        <ResponsiveBlock {...rest}>\r\n            {children}\r\n        </ResponsiveBlock>\r\n    )\r\n }\r\n\r\nexport default Responsive\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\nimport Responsive from './Responsive';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n\tposition: fixed;\r\n\twidth: 100%;\r\n\tbackground: white;\r\n\tbox-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일 추가\r\n */\r\n\r\nconst Wrapper = styled(Responsive)`\r\n\theight: 4rem;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n\t.logo {\r\n\t\tfont-size: 1.125rem;\r\n\t\tfont-weight: 800;\r\n\t\tletter-spacing: 2px;\r\n\t}\r\n\t.right {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t}\r\n\t.conetent {\r\n\t\tdisplay: flex;\r\n\t\talign-items: left;\r\n\t}\r\n`;\r\n\r\nconst Spacer = styled.div`\r\n\theight: 4rem;\r\n`;\r\n\r\nconst UserInfoBlock = styled.div`\r\n\tfont-weight: 800;\r\n\tmargin-right: 1rem;\r\n`;\r\n\r\nconst UserInfo = ({username}) => {\r\n\treturn (\r\n\t\t<UserInfoBlock>\r\n\t\t\t<Link to={'/@' + username}>{username}</Link>\r\n\t\t</UserInfoBlock>\r\n\t)\r\n}\r\n\r\nconst Header = ({user, onLogout}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<HeaderBlock>\r\n\t\t\t\t<Wrapper>\r\n\t\t\t\t\t<Link to=\"/\" className=\"logo\">\r\n\t\t\t\t\t\tMyJunkPage\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t{user ? (\r\n\t\t\t\t\t\t<div className=\"right\">\r\n\t\t\t\t\t\t\t<UserInfo username={user.username}>님 반갑습니다.</UserInfo>\r\n                            <Button onClick={onLogout}>로그아웃</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div className=\"right\">\r\n\t\t\t\t\t\t\t<Button to=\"/login\">로그인</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Wrapper>\r\n\t\t\t</HeaderBlock>\r\n\t\t\t<Spacer />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","/*\r\n    axios 인스턴스 생성\r\n */\r\n\r\nimport axios from 'axios'\r\n\r\nconst client = axios.create()\r\n\r\n/* 글로벌 설정 */\r\n\r\nexport default client","import client from './client'\r\n\r\n//로그인\r\nexport const login = ({ username, password }) =>\r\n    client.post('/api/auth/login', {username, password})\r\n\r\n//회원가입\r\nexport const register = ({username, password}) =>\r\n    client.post('/api/auth/register', {username, password})\r\n\r\n//로그아웃\r\nexport const logout = () => {\r\n    client.post('/api/auth/logout')\r\n}\r\n\r\n//로그인 상태 확인\r\nexport const check = () => \r\n    client.get('/api/auth/check')","import { createAction, handleActions } from 'redux-actions'\r\n\r\nconst START_LOADING = 'loading/START_LOADING'\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING'\r\n\r\n/*\r\n    요청을 위한 액션 타입은 payload로 설정 (예: \"sample/GET_POST\")\r\n\r\n    리듀서 만든뒤에 루트 리듀서에도 등록할것\r\n*/\r\n\r\nexport const startLoading = createAction (\r\n    START_LOADING,\r\n    requestType => requestType,\r\n)\r\n\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    requestType => requestType,\r\n)\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n    {\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true,\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false,\r\n        }),\r\n    },\r\n    initialState\r\n)\r\n\r\nexport default loading","import { call, put } from 'redux-saga/effects'\r\nimport { startLoading, finishLoading} from '../modules/loading'\r\n\r\nexport const createRequestActionTypes = type => {\r\n    const SUCCESS = `${type}_SUCCESS`\r\n    const FAILURE = `${type}_FAILURE`\r\n    return [type, SUCCESS, FAILURE]\r\n}\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`\r\n    const FAILURE = `${type}_FAILURE`\r\n\r\n    return function* (action){\r\n        yield put(startLoading(type)) //로딩 시작\r\n        try{\r\n            const response = yield call(request, action.payload)\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n                meta: response,\r\n            })\r\n        }\r\n        catch(e){\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            })\r\n        }\r\n        yield put(finishLoading(type)) //로딩 끝\r\n    }\r\n}","import { createAction, handleActions } from 'redux-actions'\r\nimport { takeLatest, call } from 'redux-saga/effects'\r\nimport * as authAPI from '../lib/api/auth'\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER' //새로고침 이후 임시 로그인 처리\r\n//회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes('user/CHECK')\r\nconst LOGOUT = 'user/LOGOUT'\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user)\r\nexport const check = createAction(CHECK)\r\nexport const logout = createAction(LOGOUT)\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check)\r\nexport function* userSaga() {\r\n    yield takeLatest(CHECK, checkSaga)\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga)\r\n    yield takeLatest(LOGOUT, logoutSaga)\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try{\r\n        yield call(authAPI.logout)\r\n        localStorage.removeItem('user')\r\n    }catch(e){\r\n        console.log('localStorage is not working')\r\n    }\r\n}\r\n\r\nfunction checkFailureSaga(){\r\n    try{\r\n        localStorage.removeItem('user') //localStorage에서 user를 제거\r\n    }catch(e){\r\n        console.log('localStorage is not working')\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    user: null,\r\n    checkError: null,\r\n}\r\n\r\nexport default handleActions(\r\n    {\r\n        [TEMP_SET_USER]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user,\r\n            checkError: null\r\n        }),\r\n        [CHECK_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            user: null,\r\n            checkError: error\r\n        }),\r\n        [LOGOUT]: state => ({\r\n            ...state,\r\n            user: null,\r\n        }),\r\n    },\r\n    initialState\r\n)\r\n\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport Header from '../../components/common/Header'\r\nimport { logout } from '../../modules/user'\r\n\r\nconst HeaderContainer = () => {\r\n    const { user } = useSelector(({ user }) => ({ user: user.user }))\r\n    const dispatch = useDispatch()\r\n    const onLogout = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <Header user={user} onLogout={onLogout}/>\r\n    )\r\n}\r\n\r\nexport default HeaderContainer\r\n","import React from 'react'\r\nimport { withRouter } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components'\r\nimport palette from '../../lib/styles/palette'\r\n\r\nconst StyledPageNumber = styled.div`\r\n\tpadding: 0.125rem 0.5rem 0 0.5rem;\r\n\t\r\n\t${props => \r\n\t\tprops.currentPage && \r\n\t\t\tcss`\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t`}\r\n\t&:hover {\r\n\t\tcolor: ${palette.cyan[6]};\r\n\t\tborder: 1px solid ${palette.gray[3]};\r\n\t}\r\n`;\r\n\r\n const PageNumber = ({to, history, ...rest}) => {\r\n    \r\n\tconst onClick = e => {\r\n\t\tif(to) {\r\n\t\t\thistory.push(to)\r\n\t\t}\r\n\t\tif(rest.onClick) {\r\n\t\t\trest.onClick(e)\r\n\t\t}\r\n\t}\r\n\r\n\treturn <StyledPageNumber {...rest} onClick={onClick}/>\r\n}\r\n\r\nexport default withRouter(PageNumber)\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\nimport PageNumber from '../common/PageNumber';\r\n\r\n\r\nconst PaginationBlock = styled.div`\r\n\twidth: 320px;\r\n\tmargin: 0 auto;\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\tmargin-bottom: 3rem;\r\n`;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n\tconst query = qs.stringify({ tag, page });\r\n\treturn username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, tag, username, lastPage }) => {\r\n\treturn (\r\n\t\t<PaginationBlock>\r\n\t\t\t<Button\r\n\t\t\t\tdisabled={page === 1}\r\n\t\t\t\tto={\r\n\t\t\t\t\tpage === 1\r\n\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t: buildLink({ username, tag, page: page - 1 })\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t이전\r\n\t\t\t</Button>\r\n\t\t\t{/*\r\n\t\t\t\t* 만약 10개를 한묶음으로 한다면?\r\n\t\t\t\t * 반복문을 어떻게 써야할까\r\n\t\t\t\t * 1. 1~10까지의 배열을만들어 map을사용\r\n\t\t\t */\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t[...Array(5)].map((n, index) => {\r\n\t\t\t\t\tconst pagination = Math.ceil(page / 5) - 1\r\n\t\t\t\t\tconst pageIndex = index + (pagination * 5) + 1\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tpageIndex <= lastPage && pageIndex > 0?\r\n\t\t\t\t\t\t\tpageIndex === page ? \r\n\t\t\t\t\t\t\t\t<PageNumber currentPage key={pageIndex}>{pageIndex}</PageNumber>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<PageNumber to={buildLink({ username, tag, page: pageIndex})} key={pageIndex}>{pageIndex}</PageNumber>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\tundefined\r\n\t\t\t\t\t\t)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t<Button\r\n\t\t\t\tdisabled={page >= lastPage}\r\n\t\t\t\tto={\r\n\t\t\t\t\tpage === lastPage\r\n\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t: buildLink({ username, tag, page: page + 1 })\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t다음\r\n\t\t\t</Button>\r\n\t\t</PaginationBlock>\r\n\t);\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Pagination from '../../components/posts/Pagination'\r\nimport qs from 'qs'\r\n\r\n\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n    const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n        lastPage: posts.lastPage,\r\n        posts: posts.posts,\r\n        loading: loading['posts/LIST_POSTS'],\r\n    }))\r\n\r\n    //포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n    if (!posts || loading) return null;\r\n\r\n    //page가 없으면 1을 기본값으로 사용\r\n    const { tag, username, page = 1 } = qs.parse(location.search, {\r\n        ignoreQueryPrefix: true,\r\n    })\r\n\r\n    return (\r\n        <Pagination tag = {tag} username = {username} page = {parseInt(page, 10)} lastPage = {lastPage}/>\r\n    )\r\n}\r\n\r\nexport default withRouter(PaginationContainer)\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\n\r\nconst SubInfoBlock = styled.div`\r\n\t${(props) =>\r\n\t\tprops.hasMarginTop && css`\r\n\t\t\tmargin-top: 1rem;\r\n\t\t`}\r\n    color: ${palette.gray[6]};\r\n\r\n    /* span 사이에 가운뎃점 문자 보여 주기 */\r\n    span + span:before {\r\n        color: ${palette.gray[5]};\r\n        padding-left: 0.25rem;\r\n        padding-right: 0.25rem;\r\n        content: '\\\\B7' /* 가운뎃점 문자 */\r\n    }\r\n`;\r\n\r\nconst SubInfo = ({username, publishedDate, hasMarginTop}) => {\r\n\treturn (\r\n\t\t<SubInfoBlock hasMarginTop={hasMarginTop}>\r\n\t\t\t<span>\r\n\t\t\t\t<b>\r\n\t\t\t\t\t<Link to={`/@${username}`}>{username}</Link>\r\n\t\t\t\t</b>\r\n\t\t\t</span>\r\n            <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n\t\t</SubInfoBlock>\r\n\t);\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport palette from '../../lib/styles/palette'\r\n\r\n const TagsBlock = styled.div`\r\n    margin-top: 0.5rem;\r\n    .tag {\r\n        display: inline-block;\r\n        color: ${palette.cyan[7]};\r\n        text-decoration: none;\r\n        margin-right: 0.5rem;\r\n\r\n        &:hover {\r\n            color: ${palette.cyan[6]};\r\n        }\r\n    }\r\n `\r\n\r\n const Tags = ({tags}) => {\r\n    return (\r\n        <TagsBlock>\r\n            {tags.map(tag => (\r\n                <Link className='tag' to={`/?tag=${tag}`} key={tag}> #{tag} </Link>\r\n            ))}\r\n        </TagsBlock>\r\n    )\r\n}\r\n\r\nexport default Tags\r\n","import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo'\r\nimport Tags from '../common/Tags'\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n\tmargin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n\tmargin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n\tpadding-top: 3rem;\r\n\tpadding-bottom: 3rem;\r\n\r\n\t&:first-child {\r\n\t\tpadding-top: 0;\r\n\t}\r\n\t& + & {\r\n\t\tborder-top: 1px solid ${palette.gray[2]};\r\n\t}\r\n\r\n\th2 {\r\n\t\tfont-size: 2rem;\r\n\t\tmargin-bottom: 0;\r\n\t\tmaring-top: 0;\r\n\t\t&:hover {\r\n\t\t\tcolor: ${palette.gray[6]};\r\n\t\t}\r\n\t}\r\n\tp {\r\n\t\tmargin-top: 2rem;\r\n\t}\r\n`;\r\n\r\nconst PostItem = ({post}) => {\r\n\tconst {publishedDate, user, tags, title, body, _id} = post\r\n\treturn (\r\n\t\t<PostItemBlock>\r\n\t\t\t<Link to={`/@${user.username}/${_id}`}><h2> {title} </h2></Link>\r\n\t\t\t<SubInfo username={user.username} publishedDate={new Date(publishedDate)}/>\r\n            <Tags tags={tags}/>\r\n\t\t\t<p>{body}</p>\r\n\t\t</PostItemBlock>\r\n\t);\r\n};\r\n\r\nconst PostList = ({posts, loading, error, showWriteButton}) => {\r\n\r\n\tif(error) {\r\n\t\treturn <PostListBlock>에러가 발생하였습니다.</PostListBlock>\r\n\t}\r\n\r\n\treturn (\r\n        <PostListBlock>\r\n            <WritePostButtonWrapper>\r\n\t\t\t\t{showWriteButton && (\r\n\t\t\t\t<Button cyan to=\"/write\">\r\n                    새 글 작성하기\r\n                </Button>)}\r\n                \r\n            </WritePostButtonWrapper>\r\n\t\t\t{!loading && posts && (\r\n            <div>\r\n                {posts.map(post => (\r\n\t\t\t\t\t<PostItem post={post} key={post._id}/>\r\n\t\t\t\t))}\r\n            </div>\r\n\t\t\t)}\r\n\r\n\t\t\t\r\n        </PostListBlock>\r\n    )\r\n};\r\n\r\nexport default PostList;\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport * as postsAPI from '../lib/api/posts'\r\nimport { takeLatest } from 'redux-saga/effects'\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\r\n\r\nconst [\r\n    LIST_POSTS,\r\n    LIST_POSTS_SUCCESS,\r\n    LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS')\r\n\r\nexport const listPosts = createAction(\r\n    LIST_POSTS,\r\n    ({ tag, username, page }) => ({ tag, username, page }),\r\n)\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts)\r\nexport function* postsSaga() {\r\n    yield takeLatest(LIST_POSTS, listPostsSaga)\r\n}\r\n\r\nconst initialState = {\r\n    posts: null,\r\n    error: null,\r\n    lastPage: 1,\r\n}\r\n\r\nconst posts = handleActions(\r\n    {\r\n        [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n            ...state,\r\n            posts,\r\n            lastPage: parseInt(response.headers['last-page']),\r\n        }),\r\n        [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n)\r\n\r\nexport default posts\r\n","import qs from 'qs'\r\nimport client from './client'\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n    client.post('/api/posts', { title, body, tags })\r\n\r\nexport const readPost = id => client.get(`/api/posts/${id}`)\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n    const queryString = qs.stringify({\r\n        page,\r\n        username,\r\n        tag\r\n    })\r\n\r\n    return client.get(`/api/posts?${queryString}`)\r\n}\r\n\r\nexport const updatePost = ({ id, title, body, tags }) => client.patch(`/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n})\r\n\r\nexport const removePost = id => client.delete(`/api/posts/${id}`)\r\n\r\nexport const commentPost = ({ postId, body }) => client.post(`/api/comments/${postId}`, ({ body }))\r\nexport const commentsRead = id => client.get(`/api/comments/${id}`)","import qs from 'qs'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport PostList from '../../components/posts/PostList'\r\nimport { listPosts } from '../../modules/posts'\r\n\r\nconst PostListContainers = ({match, location}) => {\r\n    const dispatch = useDispatch()\r\n    const {posts, error, loading, user} = useSelector(({posts, loading, user}) => ({\r\n        posts: posts.posts,\r\n        error: posts.error,\r\n        loading: loading['posts/LIST_POSTS'],\r\n        user: user.user,\r\n    }),\r\n    )\r\n\r\n    useEffect(() => {\r\n        const {tag, page} = qs.parse(location.search, {\r\n            ignoreQueryPrefix: true,\r\n        })\r\n        const {username} = match.params\r\n\r\n        dispatch(listPosts({tag, username, page}))\r\n    },[dispatch, location.search, match])\r\n\r\n\r\n    return (\r\n        <PostList loading={loading} error={error} posts={posts} showWriteButton={user}/>\r\n    )\r\n}\r\n\r\nexport default withRouter(PostListContainers)\r\n","import React from 'react'\r\nimport HeaderContainer from '../components/common/HeaderContainer'\r\nimport PaginationContainer from '../containers/posts/PaginationContainer'\r\nimport PostListContainer from '../containers/posts/PostListContainer'\r\n\r\nfunction PostListPage() {\r\n    return (\r\n        <>\r\n        <HeaderContainer />\r\n        <PostListContainer/>\r\n        <PaginationContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostListPage\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport palette from '../../lib/styles/palette'\r\n\r\n/*\r\n    회원가입/로그인 페이지의 레이아웃\r\n */\r\n\r\n const AuthTemplateBlock = styled.div`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background: ${palette.gray[2]};\r\n    /*flex로 내부 내용 중앙 정렬*/\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n `\r\n\r\n const WhiteBox = styled.div`\r\n    .logo-area {\r\n        display: block;\r\n        padding-bottom: 2rem;\r\n        text-align: center;\r\n        font-weight: bold;\r\n        letter-spacing: 2px;\r\n    }\r\n\r\n    box-shadow: 0 0 8px rgba(0,0,0,0.025);\r\n    padding: 2rem;\r\n    width: 360px;\r\n    background: white;\r\n    border-radius: 2px;\r\n `\r\n\r\nfunction AuthTempleate({children}) {\r\n    return (\r\n        <AuthTemplateBlock>\r\n            <WhiteBox>\r\n            <div className=\"logo-area\">\r\n                <Link to=\"/\">REACTERS</Link>\r\n            </div>\r\n            {children}\r\n            </WhiteBox>\r\n        </AuthTemplateBlock>\r\n    )\r\n}\r\n\r\nexport default AuthTempleate\r\n","/*\r\n    폼 상태 관리\r\n*/\r\n\r\nimport { createAction, handleActions } from 'redux-actions'\r\nimport produce from 'immer'\r\nimport { takeLatest } from 'redux-saga/effects'\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\r\nimport * as authAPI from '../lib/api/auth'\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD'\r\nconst INITIALIZE_FORM = 'auth/INITALIZE_FORM'\r\n\r\nconst[REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER')\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN')\r\n\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({form, key, value}) => ({\r\n        form, // register, login\r\n        key, // username, password, passwordConfirm\r\n        value, // 실제 바꾸려는 값\r\n    })\r\n)\r\n\r\nexport const register = createAction(REGISTER, ({username, password}) => ({\r\n    username,\r\n    password\r\n}))\r\n\r\nexport const login = createAction(LOGIN, ({username, password}) => ({\r\n    username,\r\n    password\r\n}))\r\n\r\n//사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register)\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login)\r\nexport function* authSaga() {\r\n    yield takeLatest(REGISTER, registerSaga)\r\n    yield takeLatest(LOGIN, loginSaga)\r\n}\r\n\r\nexport const initalizeForm = createAction(INITIALIZE_FORM, form => form ) //register/login\r\nconst initialState = {\r\n    register: {\r\n        username: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n    },\r\n    login: {\r\n        username: '',\r\n        password: '',\r\n    },\r\n}\r\n\r\nconst auth = handleActions(\r\n    {\r\n        [CHANGE_FIELD]: (state, {payload: {form, key, value}}) => \r\n            produce(state, draft => {\r\n                draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n            }),\r\n        [INITIALIZE_FORM]: (state, {payload: form}) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n            authError: null, //폼 전환 시 회원 인증 에러 초기화\r\n        }),\r\n        //회원가입 성공\r\n        [REGISTER_SUCCESS]: (state, {payload: auth}) => ({\r\n            ...state, \r\n            authError: null,\r\n            auth\r\n        }) ,\r\n        //회원가입 실패\r\n        [REGISTER_FAILURE]: (state, {payload: error}) => ({\r\n            ...state, \r\n            authError: error,\r\n        }) ,\r\n        //로그인 성공\r\n        [LOGIN_SUCCESS]: (state, {payload: auth}) => ({\r\n            ...state, \r\n            authError: null,\r\n            auth\r\n        }) ,\r\n        //로그인 실패\r\n        [LOGIN_FAILURE]: (state, {payload: error}) => ({\r\n            ...state, \r\n            authError: error,\r\n        }) ,\r\n\r\n    },\r\n    initialState,\r\n)\r\n\r\nexport default auth","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n/*\r\n\t회원가입 또는 로그인 폼을 보여줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n\th3 {\r\n\t\tmargin: 0;\r\n\t\tcolor: ${palette.gray[8]};\r\n\t\tmargin-bottom: 1rem;\r\n\t}\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n\tfont-size: 1rem;\r\n\tborder: none;\r\n\tborder-bottom: 1px solid ${palette.gray[5]};\r\n\tpadding-bottom: 0.5rem;\r\n\toutline: none;\r\n\twidth: 100%;\r\n\t&:focus {\r\n\t\tcolor: $oc-teal-7;\r\n\t\tborder-bottom: 1px solid ${palette.gray[7]};\r\n\t}\r\n\r\n\t& + & {\r\n\t\tmargin-top: 1rem;\r\n\t}\r\n`;\r\n\r\nconst Footer = styled.div`\r\n\tmargin-top: 2rem;\r\n\ttext-align: right;\r\n\ta {\r\n\t\tcolor: ${palette.gray[6]};\r\n\t\ttext-decoration: underline;\r\n\t\t&:hover {\r\n\t\t\tcolor: ${palette.gray[9]};\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n\tmargin-top: 1rem;\r\n`;\r\n\r\n/**\r\n * 에러를 보여줍니다\r\n */\r\n\r\nconst ErrorMessage = styled.div`\r\n color: red;\r\n text-align: center;\r\n font-size: 0.875rem;\r\n margin-top: 1rem;\r\n `\r\n\r\nconst textMap = {\r\n\tlogin: '로그인',\r\n\tregister: '회원가입',\r\n};\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n\tconst text = textMap[type];\r\n\treturn (\r\n\t\t<AuthFormBlock>\r\n\t\t\t<h3>{text}</h3>\r\n\t\t\t<form onSubmit={onSubmit}>\r\n\t\t\t\t<StyledInput\r\n\t\t\t\t\tautoComplete=\"username\"\r\n\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\tplaceholder=\"아이디\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={form.username}\r\n\t\t\t\t/>\r\n\t\t\t\t<StyledInput\r\n\t\t\t\t\tautoComplete=\"new-password\"\r\n\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\tplaceholder=\"비밀번호\"\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={form.password}\r\n\t\t\t\t/>\r\n\t\t\t\t{type === 'register' && (\r\n\t\t\t\t\t<StyledInput\r\n\t\t\t\t\t\tautoComplete=\"new-password\"\r\n\t\t\t\t\t\tname=\"passwordConfirm\"\r\n\t\t\t\t\t\tplaceholder=\"비밀번호확인\"\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tvalue={form.passwordConfirm}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{error && <ErrorMessage>{error}</ErrorMessage>}\r\n\t\t\t\t<ButtonWithMarginTop fullWidth>{text}</ButtonWithMarginTop>\r\n\t\t\t</form>\r\n\t\t\t<Footer>\r\n\t\t\t\t{\r\n\t\t\t\t\ttype === 'login' ? (\r\n\t\t\t\t\t\t<Link to=\"/register\">회원가입</Link>\r\n\t\t\t\t\t) :\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t<Link to=\"/login\">로그인</Link>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t}\r\n\r\n\t\t\t</Footer>\r\n\t\t</AuthFormBlock>\r\n\t);\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeField, initalizeForm, login } from '../../modules/auth'\r\nimport AuthForm from '../../components/auth/AuthForm'\r\nimport { check } from '../../modules/user'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst LoginForm = ({ history }) => {\r\n    const dispatch = useDispatch()\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.login,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n    }))\r\n\r\n    const[error, setError] = useState(null)\r\n\r\n    //인풋 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'login',\r\n                key: name,\r\n                value\r\n            })\r\n        )\r\n    }\r\n\r\n    //폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        const { username, password } = form\r\n        dispatch(login({ username, password }))\r\n    }\r\n\r\n    //컴포넌트가 처음 렌더링 될 때 form을 초기화함\r\n    useEffect(() => {\r\n        dispatch(initalizeForm('login'))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (authError) {\r\n            console.log('오류 발생')\r\n            console.log(authError)\r\n            setError('로그인 실패')\r\n            return\r\n        }\r\n        if (auth) {\r\n            console.log('로그인 성공')\r\n            dispatch(check())\r\n        }\r\n    }, [auth, authError, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/')\r\n            try{\r\n                localStorage.setItem('user', JSON.stringify(user))\r\n            }catch(e) {\r\n                console.log('localStorage is not working')\r\n            }\r\n        }\r\n    }, [history, user])\r\n\r\n    return (\r\n        <AuthForm\r\n            type=\"login\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    )\r\n}\r\n\r\nexport default withRouter(LoginForm)\r\n","import React from 'react'\r\nimport AuthTemplate from '../components/auth/AuthTemplate'\r\nimport LoginForm from '../containers/auth/LoginForm'\r\n\r\nfunction LoginPage() {\r\n    return (\r\n        <AuthTemplate>\r\n            <LoginForm/>            \r\n        </AuthTemplate>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeField, initalizeForm, register } from '../../modules/auth'\r\nimport AuthForm from '../../components/auth/AuthForm'\r\nimport { check } from '../../modules/user'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst RegisterForm = ({ history }) => {\r\n    const dispatch = useDispatch()\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n    }))\r\n\r\n    const [error, setError] = useState(null)\r\n\r\n    //인풋 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'register',\r\n                key: name,\r\n                value\r\n            })\r\n        )\r\n    }\r\n\r\n    //폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        const { username, password, passwordConfirm } = form\r\n\r\n        //하나라도 비어 있다면\r\n        if([username, password, passwordConfirm].includes('')){\r\n            setError('빈 칸을 모두 입력하세요')\r\n            return\r\n        }\r\n        //비밀번호 일치하지 않을때\r\n        if(password !== passwordConfirm){\r\n            setError('비밀번호가 일치하지 않습니다.')\r\n            dispatch(changeField({form:'register', key: 'password', value:''}))\r\n            dispatch(changeField({form:'register', key: 'passwordConfirm', value:''}))\r\n            return\r\n        }\r\n        \r\n        dispatch(register({ username, password }))\r\n    }\r\n\r\n    //컴포넌트가 처음 렌더링 될 때 form을 초기화함\r\n    useEffect(() => {\r\n        dispatch(initalizeForm('register'))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/')\r\n        }\r\n    }, [history, user])\r\n\r\n    //회원가입 성공/실패 처리\r\n    useEffect(() => {\r\n        if (authError) {\r\n            if(authError.response.status === 409){\r\n                setError('이미 존재하는 계정명 입니다.')\r\n            }\r\n            //기타\r\n            setError('회원가입 실패')\r\n            return\r\n        }\r\n        if (auth) {\r\n            console.log('회원가입 성공')\r\n            console.log(auth)\r\n            dispatch(check())\r\n        }\r\n    }, [auth, authError, dispatch])\r\n\r\n    //유저가 잘 넘어갔는지 확인\r\n    useEffect(()=> {\r\n        if(user){\r\n            console.log('check API 성공')\r\n            console.log(user)\r\n            history.push('/')\r\n            try{\r\n                localStorage.setItem('user', JSON.stringify(user))\r\n            }catch(e) {\r\n                console.log('localStorage is not working')\r\n            }\r\n        }\r\n    }, [history, user])\r\n\r\n    return (\r\n        <AuthForm\r\n            type=\"register\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    )\r\n}\r\n\r\nexport default withRouter(RegisterForm)\r\n","import React from 'react'\r\nimport AuthTemplate from '../components/auth/AuthTemplate'\r\nimport RegisterForm from '../containers/auth/RegisterForm'\r\n\r\nfunction RegisterPage() {\r\n    return (\r\n        <AuthTemplate>\r\n            <RegisterForm/>\r\n        </AuthTemplate>\r\n    )\r\n}\r\n\r\nexport default RegisterPage\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\r\nimport * as postsAPI from '../lib/api/posts'\r\nimport { takeLatest } from 'redux-saga/effects'\r\n\r\nconst INITIALIZE = 'write/INITIALIZE' //모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD' //특정 key 값 바꾸기\r\n\r\nconst [\r\n    WRITE_POST,\r\n    WRITE_POST_SUCCESS,\r\n    WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST') //포스트 작성\r\n\r\nconst[\r\n    UPDATE_POST,\r\n    UPDATE_POST_SUCCESS,\r\n    UPDATE_POST_FAILURE\r\n] = createRequestActionTypes('write/UPDATE_POST')\r\n\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST'\r\n\r\nexport const initialize = createAction(INITIALIZE)\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n    key,\r\n    value,\r\n}))\r\n\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n    title,\r\n    body,\r\n    tags,\r\n}))\r\n\r\nexport const updatePost = createAction(UPDATE_POST, ({id, title, body, tags}) => ({\r\n        id, \r\n        title, \r\n        body, \r\n        tags,\r\n    }))\r\n\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post)\r\n\r\n//사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost)\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost)\r\nexport function* writeSaga() {\r\n    yield takeLatest(WRITE_POST, writePostSaga)\r\n    yield takeLatest(UPDATE_POST, updatePostSaga)\r\n}\r\n\r\nconst initialState = {\r\n    title: '',\r\n    body: '',\r\n    tags: [],\r\n    post: null,\r\n    postError: null,\r\n    originalPostId: null,\r\n}\r\n\r\nconst write = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, //초기상태\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, //특정 key값을 업데이트\r\n        }),\r\n        [WRITE_POST]: state => ({\r\n            ...state,\r\n            //post와 postError 동기화\r\n            post: null,\r\n            postError: null\r\n        }),\r\n        //포스트 작성\r\n        [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        //포스트 작성 실패\r\n        [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n            ...state,\r\n            postError\r\n        }),\r\n        [UPDATE_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post\r\n        }),\r\n        [UPDATE_POST_FAILURE]: (state, {payload: postError}) => ({\r\n            ...state,\r\n            postError\r\n        }),\r\n        [SET_ORIGINAL_POST]: (state, {payload: post}) => ({\r\n            ...state,\r\n            title: post.title,\r\n            body: post.body,\r\n            tags: post.tags,\r\n            originalPostId: post._id,\r\n        }),\r\n    }, initialState\r\n)\r\nexport default write\r\n","import React, { useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport Quill from 'quill'\r\nimport 'quill/dist/quill.snow.css'\r\nimport palette from '../../lib/styles/palette'\r\n\r\n const EditorBlock = styled.div`\r\n    /* 페이지 위아래 여백 */\r\n    padding-top : 5rem;\r\n    padding-bottom: 5rem;\r\n `\r\n\r\n const TitleInput = styled.input`\r\n    font-size: 3rem;\r\n    outline: none;\r\n    padding-bottom: 2rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[4]}\r\n    margin-bottom: 3rem;\r\n    width: 100%;\r\n `\r\n\r\n const QuillWrapper = styled.div`\r\n    /* 최소 크기 지정 및 padding 제거 */\r\n    .ql-editor {\r\n        padding: 0;\r\n        min-height: 320px;\r\n        font-size: 1.125rem;\r\n        line-height: 1.5;\r\n    }\r\n    .ql-editor.ql-blank::before{\r\n        left: 0px;\r\n    }\r\n `\r\n\r\nconst Editor = ({title, body, onChangeField}) => {\r\n    const quillElement = useRef(null) //Quill 을 적용할 divElement를 설정\r\n    const quillInstance = useRef(null) //Quill 인스턴스를 설정\r\n\r\n    useEffect(() => {\r\n        quillInstance.current = new Quill(quillElement.current, {\r\n\t\t\ttheme: 'snow',\r\n\t\t\tplaceholder: '내용을 작성하세요...',\r\n\t\t\tmodules: {\r\n\t\t\t\t//https://quilljs.com/docs/modules/toolbar\r\n                toolbar: [\r\n                    [{font: []}],\r\n                    [{size: ['smail', 'large', 'huge']}],\r\n                    [{ 'header': 1 }, { 'header': 2 }],\r\n\t\t\t\t\t['bold', 'italic', 'underline', 'strike'],\r\n\t\t\t\t\t[{ list: 'ordered' }, { list: 'bullet' }],\r\n                    ['blockquote', 'code-block', 'link', 'image'],\r\n\t\t\t\t],\r\n\t\t\t},\r\n        });\r\n\r\n        //https://quilljs.com/docs/api/#events\r\n        const quill = quillInstance.current;\r\n        quill.on('text-change', (delta, oldDelta, source) => {\r\n            if(source === 'user') {\r\n                onChangeField({key: 'body', value: quill.root.innerHTML})\r\n            }\r\n        })\r\n    }, [onChangeField])\r\n\r\n    const mounted = useRef(false);\r\n    useEffect(() => {\r\n        if(mounted.current) return\r\n        mounted.current = true\r\n        quillInstance.current.root.innerHTML = body\r\n    }, []) /* eslint-disable-line */ //해당 줄만 eslint 규칙 비활성화\r\n\r\n    const onChangeTitle = e => {\r\n        onChangeField({key:'title', value: e.target.value})\r\n    }\r\n    \r\n        \r\n    return (\r\n        <EditorBlock>\r\n            <TitleInput placeholder ='제목을 입력하세요' onChange={onChangeTitle} value={title}/>\r\n            <QuillWrapper>\r\n                <div ref={quillElement}/>\r\n            </QuillWrapper>\r\n        </EditorBlock>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","import React, { useEffect, useCallback } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { changeField, initialize } from '../../modules/write'\r\nimport Editor from '../../components/write/Editor'\r\n\r\nconst EditorContainer = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {title, body} = useSelector(({write}) => ({\r\n        title: write.title,\r\n        body: write.body,\r\n    }))\r\n\r\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)), [dispatch])\r\n\r\n    //언마운트 될 때 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Editor onChangeField={onChangeField} title={title} body={body}/>\r\n    )\r\n}\r\n\r\nexport default EditorContainer\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n    width:100%;\r\n    border-top: 1px solid ${palette.gray[2]}\r\n    padding-top: 2rem;\r\n\r\n    h4{\r\n        color: ${palette.gray[8]}\r\n        margin-top: 0;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    display: flex;\r\n    width: 256px;\r\n    border: 1px solid ${palette.gray[9]}\r\n    input,\r\n    button {\r\n        outline: none;\r\n        border: none;\r\n        font-size: 1rem;\r\n    }\r\n\r\n    input {\r\n        padding: 0.5rem;\r\n        flex: 1;\r\n        min-width: 0;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer,\r\n            padding-right: 1rem;\r\n            padding-left: 1rem;\r\n            border: none;\r\n            background: ${palette.gray[8]};\r\n            color: white;\r\n            font-weight: bold;\r\n            &:hover {\r\n                background: ${palette.gray[6]};\r\n            }\r\n    }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n\tmargin-right: 0.5rem;\r\n\tcolor: ${palette.gray[6]};\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\topacity: 0.5;\r\n\t}\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n\tdisplay: flex;\r\n\tmargin-top: 0.5rem;\r\n`;\r\n\r\n//tag 값이 바뀔 때만 리렌더링\r\nconst TagItem = React.memo(({ tag, onRemove }) => <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>);\r\n\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n    <TagListBlock>\r\n        {tags.map((tag) => (\r\n            <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n        ))}\r\n    </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n    const [input, setInput] = useState('')\r\n    const [localTags, setLocalTags] = useState([])\r\n\r\n    const insertTag = useCallback(\r\n        tag => {\r\n            if (!tag) return //태그가 공백이라면 추가하지않음\r\n            if (localTags.includes(tag)) return //이미 존재한다면 추가하지않음\r\n            const nextTags = [...localTags, tag]\r\n            setLocalTags(nextTags)\r\n            onChangeTags(nextTags)\r\n        }, [localTags, onChangeTags],\r\n    )\r\n\r\n    const onRemove = useCallback(\r\n        tag => {\r\n            const nextTags = localTags.filter(t => t !== tag)\r\n            setLocalTags(nextTags)\r\n            onChangeTags(nextTags)\r\n        }, [localTags, onChangeTags],\r\n    )\r\n\r\n    const onChange = useCallback(\r\n        e => {\r\n            setInput(e.target.value)\r\n        }, []\r\n    )\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            e.preventDefault()\r\n            insertTag(input.trim())\r\n            setInput('')\r\n        },\r\n        [input, insertTag],\r\n    )\r\n\r\n    useEffect(() => {\r\n        setLocalTags(tags)\r\n    }, [tags])\r\n\r\n\r\n    return (\r\n        <TagBoxBlock>\r\n            <h4>태그</h4>\r\n            <TagForm onSubmit={onSubmit}>\r\n                <input placeholder='태그를 입력하세요' value={input} onChange={onChange} />\r\n                <button type='submit'>추가</button>\r\n            </TagForm>\r\n            <TagList tags={localTags} onRemove={onRemove} />\r\n        </TagBoxBlock>\r\n    );\r\n};\r\n\r\nexport default TagBox;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport TagBox from '../../components/write/TagBox'\r\nimport { changeField } from '../../modules/write'\r\n\r\nconst TagBoxContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const tags = useSelector(state => state.write.tags)\r\n\r\n    const onChangeTags = nextTags => {\r\n        dispatch(\r\n            changeField({\r\n                key:'tags',\r\n                value: nextTags,\r\n            }),\r\n        )\r\n    }\r\n\r\n    return (\r\n        <TagBox onChangeTags={onChangeTags} tags={tags}/>\r\n    )\r\n}\r\n\r\nexport default TagBoxContainer\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n\tmargin-top: 1rem;\r\n\tmargin-bottom: 3rem;\r\n\tbutton + button {\r\n\t\tmargin-left: 0.5rem;\r\n\t}\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n\theight: 2.2125rem;\r\n\t& + & {\r\n\t\tmargin-left: 0.5rem;\r\n\t}\r\n`;\r\n\r\nfunction WriteActionButtons({ onCancel, onPublish, isEdit }) {\r\n\treturn (\r\n\t\t<WriteActionButtonsBlock>\r\n\t\t\t<StyledButton cyan onClick={onPublish}>\r\n\t\t\t\t포스트 {isEdit ? '수정' : '등록'}\r\n\t\t\t</StyledButton>\r\n\t\t\t<StyledButton onClick={onCancel}>취소</StyledButton>\r\n\t\t</WriteActionButtonsBlock>\r\n\t);\r\n}\r\n\r\nexport default WriteActionButtons;\r\n","import React, {useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons'\r\nimport { updatePost, writePost } from '../../modules/write'\r\n\r\nconst WriteActionButtonsContainer = ({history}) => {\r\n    const dispatch = useDispatch()\r\n    const {title, body, tags, post, postError, originalPostId} = useSelector(({write}) => ({\r\n        title: write.title,\r\n        body: write.body,\r\n        tags: write.tags,\r\n        post: write.post,\r\n        postError: write.postError,\r\n        originalPostId: write.originalPostId,\r\n    }))\r\n\r\n    //포스트 등록\r\n    const onPublish = () => {\r\n        if(originalPostId){\r\n            dispatch(updatePost({title, body, tags, id: originalPostId}))\r\n            return \r\n        }\r\n        dispatch(writePost({\r\n            title, body, tags,\r\n        }),)\r\n    }\r\n\r\n    //취소\r\n    const onCancel = () => {\r\n        history.goBack()\r\n    }\r\n\r\n    //성공/실패시\r\n    useEffect(() => {\r\n        if(post) { //성공\r\n            const{_id, user} = post;\r\n            history.push(`/@${user.username}/${_id}`)\r\n        }\r\n        if(postError){ //실패\r\n            console.log(postError)\r\n        }\r\n    }, [post, postError, history])\r\n\r\n    //isEdit 값이 존재하면 포스트 등록이 수정이 됨\r\n    return (\r\n        <WriteActionButtons onPublish={onPublish} onCancel={onCancel} isEdit={!!originalPostId}/>\r\n    )\r\n}\r\n\r\nexport default withRouter(WriteActionButtonsContainer)\r\n","import React from 'react'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport Responsive from '../components/common/Responsive'\r\nimport EditorContainer from '../containers/write/EditorContainer'\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer'\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer'\r\n\r\nfunction WritePage() {\r\n    return (\r\n        <Responsive>\r\n            <Helmet>\r\n                <title>글 작성하기</title>\r\n            </Helmet>\r\n            <EditorContainer/>\r\n            <TagBoxContainer/>\r\n            <WriteActionButtonsContainer/>\r\n        </Responsive>\r\n    )\r\n}\r\n\r\nexport default WritePage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from './Button'\r\n\r\nconst Fullscreen = styled.div`\r\n\tposition: fixed;\r\n\tz-index: 30;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\n const AskModalBlock = styled.div`\r\n    width: 320px;\r\n    background: white;\r\n    padding: 1.5rem;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n    h2{\r\n        margin-top: 0;\r\n        margin-bottom: 1rem;\r\n    }\r\n    p{\r\n        margin-bottom: 3rem;\r\n    }\r\n\r\n    .buttons{\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n `\r\n\r\n const StyledButton = styled(Button)`\r\n    height: 2rem;\r\n    & + & {\r\n        margin-left: 0.75rem;\r\n    }\r\n `\r\n\r\n const AskModal = ({ visible, title, description, confirmText ='확인', cancelText = '취소', onConfirm, onCancel,}) => {\r\n     if(!visible) return null\r\n    return (\r\n        <Fullscreen>\r\n            <AskModalBlock>\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <div className='buttons'>\r\n                    <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n                    <StyledButton cyan onClick={onConfirm}>\r\n                        {confirmText}\r\n                    </StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </Fullscreen>\r\n    )\r\n}\r\n\r\nexport default AskModal\r\n","import React from 'react'\r\nimport AskModal from '../common/AskModal'\r\n\r\nconst AskRemoveModal = ({visible, onConfirm, onCancel}) => {\r\n    return (\r\n        <AskModal visible={visible} title='포스트 삭제' description ='포스트를 정말 삭제하시겠습니까?'\r\n                    confirmText='삭제' onConfirm={onConfirm} onCancel={onCancel}/>\r\n    )\r\n}\r\n\r\nexport default AskRemoveModal\r\n","import React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport palette from '../../lib/styles/palette'\r\nimport AskRemoveModal from './AskRemoveModal'\r\n\r\n const PostActionButtonsBlock = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 2rem;\r\n    margin-top: -1.5rem;\r\n `\r\n\r\n const ActionButton = styled.button`\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 4px;\r\n    color: ${palette.gray[6]};\r\n    font-weight: bold;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: ${palette.gray[1]};\r\n        color: ${palette.cyan[7]};\r\n    }\r\n\r\n    & + & {\r\n        margin-left: 0.25rem;\r\n    }\r\n `\r\n\r\n const PostActionButtons = ({onEdit, onRemove}) => {\r\n     const [modal, setModal] = useState(false)\r\n     const onRemoveClick = () => {\r\n         setModal(true)\r\n     }\r\n     const onCancel = () => {\r\n         setModal(false)\r\n     }\r\n     const onConfirm = () => {\r\n         setModal(false)\r\n         onRemove()\r\n     }\r\n    return (\r\n        <>\r\n        <PostActionButtonsBlock>\r\n            <ActionButton onClick={onEdit}>수정</ActionButton>\r\n            <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n        </PostActionButtonsBlock>\r\n        <AskRemoveModal visible={modal} onConfirm={onConfirm} onCancel={onCancel}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostActionButtons\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\r\nimport * as postsAPI from '../lib/api/posts'\r\nimport { takeLatest } from 'redux-saga/effects'\r\n\r\nconst INITIALIZE = 'comment/INITIALIZE'\r\nconst CHANGE_FIELD = 'comment/CHANGE_FIELD'\r\n\r\nconst [\r\n    COMMENT_POST,\r\n    COMMENT_POST_SUCCESS,\r\n    COMMENT_POST_FAILURE,\r\n] = createRequestActionTypes('comment/COMMENT_POST')\r\n\r\nexport const initialize = createAction(INITIALIZE)\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n    key,\r\n    value,\r\n}))\r\n\r\nexport const commentPost = createAction(COMMENT_POST, ({ postId, body }) => ({\r\n    postId,\r\n    body\r\n}))\r\n\r\n//사가 생성\r\nconst commentPostSaga = createRequestSaga(COMMENT_POST, postsAPI.commentPost)\r\n\r\nexport function* commentSaga() {\r\n    yield takeLatest(COMMENT_POST, commentPostSaga)\r\n}\r\n\r\nconst initialState = {\r\n    body: '',\r\n    comment: null,\r\n    error: null,\r\n}\r\n\r\nconst comment = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState,\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value,\r\n        }),\r\n        [COMMENT_POST]: state => ({\r\n            ...state,\r\n            comment: null,\r\n            error: null,\r\n        }),\r\n        [COMMENT_POST_SUCCESS]: (state, { payload: comment }) => ({\r\n            ...state,\r\n            comment,\r\n        }),\r\n        [COMMENT_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    }, initialState\r\n)\r\n\r\nexport default comment","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst CommentActionButtonsContinerBlock = styled.div`\r\n\tmargin-top: 1rem;\r\n\tmargin-bottom: 3rem;\r\n\tbutton + button {\r\n\t\tmargin-left: 0.5rem;\r\n\t}\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n    width: 100%;\r\n\theight: 2.2125rem;\r\n\t& + & {\r\n\t\tmargin-left: 0.5rem;\r\n\t}\r\n`;\r\n\r\nfunction CommentActionButton({ onPublish, isLogin }) {\r\n\treturn (\r\n\t\t<CommentActionButtonsContinerBlock>\r\n\t\t\t{isLogin ?\r\n\t\t\t\t<StyledButton cyan onClick={onPublish} >\r\n\t\t\t\t\t댓글작성\r\n\t\t\t\t</StyledButton> :\r\n\t\t\t\t<StyledButton gray onClick={onPublish} disabled>\r\n\t\t\t\t댓글작성\r\n\t\t\t</StyledButton>\r\n\t\t\t}\r\n\t\t</CommentActionButtonsContinerBlock>\r\n\t);\r\n}\r\n\r\nexport default CommentActionButton;\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport * as postsAPI from '../lib/api/posts'\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\r\nimport { takeLatest } from 'redux-saga/effects'\r\n\r\nconst [\r\n    COMMENTS_READ,\r\n    COMMENTS_READ_SUCCESS,\r\n    COMMENTS_READ_FAILURE,\r\n] = createRequestActionTypes('comments/COMMENTS_READ')\r\n\r\nexport const commentsRead = createAction(COMMENTS_READ, id => id)\r\n\r\n//사가 생성\r\nconst commentsReadSaga = createRequestSaga(COMMENTS_READ, postsAPI.commentsRead)\r\n\r\nexport function* commentsSaga() {\r\n    yield takeLatest(COMMENTS_READ, commentsReadSaga)\r\n}\r\n\r\nconst initialState = {\r\n    comments: null,\r\n    error: null,\r\n}\r\n\r\nconst comments = handleActions(\r\n    {\r\n        [COMMENTS_READ_SUCCESS]: (state, { payload: comments }) => ({\r\n            ...state,\r\n            comments,\r\n        }),\r\n        [COMMENTS_READ_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    }, initialState,\r\n)\r\n\r\nexport default comments","import React, {useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport CommentActionButton from '../../components/comment/CommentActionButton'\r\nimport { commentPost } from '../../modules/comment'\r\nimport { commentsRead } from '../../modules/comments'\r\n\r\nconst WriteActionButtonsContainer = ({history, match}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {postId} = match.params\r\n\r\n    const {body, comment, error, user} = useSelector(({comment, user}) => ({\r\n        body: comment.body,\r\n        comment: comment.comment,\r\n        error: comment.error,\r\n        user: user.user\r\n    }))\r\n\r\n    \r\n    const onPublish = () => {\r\n        dispatch(commentPost({postId, body}))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(comment) {\r\n            dispatch(commentsRead(postId))\r\n        }else if(error){\r\n            console.log(error)\r\n        }\r\n    },[dispatch, comment, error, history, postId])\r\n\r\n    return (\r\n        <CommentActionButton onPublish={onPublish} isLogin={!!user}/>\r\n    )\r\n}\r\n\r\nexport default withRouter(WriteActionButtonsContainer)\r\n","import React, { useRef, useEffect } from 'react';\r\nimport styled from 'styled-components'\r\nimport Quill from 'quill'\r\nimport 'quill/dist/quill.snow.css'\r\nimport CommentActionButtonsContiner from '../../containers/comment/CommentActionButtonsContiner';\r\nimport { useSelector } from 'react-redux';\r\n\r\n const EditorBlock = styled.div`\r\n    /* 페이지 위아래 여백 */\r\n    padding-top : 2.5rem;\r\n    padding-bottom : 2.5rem;\r\n `\r\n\r\n const Editor = ({ body, onChangeField }) => {\r\n     const quillElement = useRef(null)\r\n     const quillInstance = useRef(null)\r\n\r\n     useEffect(() => {\r\n         quillInstance.current = new Quill(quillElement.current, {\r\n             theme: 'snow',\r\n             placeholder: '댓글은 자신의 얼굴입니다.',\r\n             modules: {\r\n                 toolbar: [\r\n                    ['image'],\r\n                 ]\r\n             }\r\n         },[])\r\n\r\n         const quill = quillInstance.current\r\n         quill.on('text-change', (delta, oldDelta, source) => {\r\n             if(source === 'user') {\r\n                onChangeField({key: 'body', value: quill.root.innerHTML})\r\n             }\r\n         })\r\n     }, [onChangeField])\r\n\r\n\r\n    const { comment } = useSelector(({comment}) => ({\r\n        comment: comment.comment,\r\n    }))\r\n\r\n    useEffect(() => {\r\n        if(comment) return\r\n        quillInstance.current.root.innerHTML = ''\r\n    },[comment])\r\n\r\n    return (\r\n        <EditorBlock>\r\n                <div ref={quillElement}/>\r\n                <CommentActionButtonsContiner/>\r\n        </EditorBlock>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeField, initialize } from '../../modules/comment'\r\nimport Editor from '../../components/comment/Editor'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst EditorContainer = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {body} = useSelector(({comment}) => ({\r\n        body: comment.body,\r\n    }))\r\n\r\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)),[dispatch])\r\n\r\n    //언마운트 시 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize())\r\n        }\r\n    },[dispatch])\r\n\r\n    return (\r\n        <Editor onChangeField={onChangeField} body={body}/>\r\n    )\r\n}\r\n\r\nexport default withRouter(EditorContainer)\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\n\r\nconst CommentListBlock = styled(Responsive)`\r\n\tmargin-top: 3rem;\r\n`;\r\n\r\nconst CommentItemBlock = styled.div`\r\n    padding-top: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    &:first-child {\r\n        padding-top: 0;\r\n    }\r\n\r\n    & + & {\r\n        border-top: 1px solid ${palette.gray[1]};\r\n    }\r\n `\r\n\r\nconst CommentContent = styled.div`\r\n    font-size: 1.25rem;\r\n    color: ${palette.gray[7]};\r\n `\r\n\r\nconst CommentItem = ({ comment }) => {\r\n    const { publishedDate, user, body } = comment\r\n    return (\r\n        <CommentItemBlock>\r\n            <SubInfo username={user.username} publishedDate={new Date(publishedDate)} />\r\n            <p dangerouslySetInnerHTML = {{__html: body}}/>\r\n        </CommentItemBlock>\r\n    )\r\n}\r\n\r\nconst CommentList = ({ comments, loading, error }) => {\r\n    if (error) {\r\n        return <CommentListBlock>에러가 발생하였습니다.</CommentListBlock>\r\n    }\r\n\r\n    return (\r\n        <CommentListBlock>\r\n            <CommentContent>\r\n                {!loading && comments && (\r\n                    <div>\r\n                        {comments.map(comment => (\r\n                            <CommentItem comment={comment} key={comment._id} />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </CommentContent>\r\n        </CommentListBlock>\r\n    )\r\n}\r\n\r\nexport default CommentList\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { commentsRead } from '../../modules/comments'\r\nimport CommentList from '../../components/comments/CommentList'\r\n\r\nconst CommentListContainer = ({ match }) => {\r\n    const { postId } = match.params\r\n    const dispatch = useDispatch()\r\n\r\n    const { comments, error, loading } = useSelector(({ comments, loading }) => ({\r\n        comments: comments.comments,\r\n        error: comments.error,\r\n        loading: loading['comments/COMMENTS_READ'],\r\n    }))\r\n\r\n    useEffect(() => {\r\n        dispatch(commentsRead(postId))\r\n    }, [dispatch, postId])\r\n\r\n    return (\r\n        <CommentList comments={comments} loading={loading} error={error} />\r\n    )\r\n}\r\n\r\nexport default withRouter(CommentListContainer)","import React from 'react'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport styled from 'styled-components'\r\nimport EditorContainer from '../../containers/comment/EditorContainer'\r\nimport CommentListContainer from '../../containers/post/CommentListContainer'\r\nimport palette from '../../lib/styles/palette'\r\nimport Responsive from '../common/Responsive'\r\nimport SubInfo from '../common/SubInfo'\r\nimport Tags from '../common/Tags'\r\n\r\n const PostViewerBlock = styled(Responsive)`\r\n    margin-top: 4rem;\r\n `\r\n\r\n const PostHead = styled.div`\r\n    border-bottom: 1px solid ${palette.gray[2]};\r\n    padding-bottom: 3rem;\r\n    margin-bottom: 3rem;\r\n    h1 {\r\n        font-size: 3rem;\r\n        line-height: 1.5;\r\n        margin: 0;\r\n    }\r\n `\r\n\r\n const PostContent = styled.div`\r\n    font-size: 1.3125rem;\r\n    color: ${palette.gray[8]};\r\n    border-bottom: 2px solid ${palette.cyan[8]};\r\n `\r\n\r\n const PostViewer = ({post, error, loading, actionButtons}) => {\r\n    if(error){\r\n        if(error.response && error.response.status === 404){\r\n            return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>\r\n        }\r\n        return <PostViewerBlock>오류 발생!</PostViewerBlock>\r\n    }\r\n\r\n    if(loading || !post) return null\r\n\r\n    const {title, body, user, publishedDate, tags} = post\r\n\r\n    return (\r\n        <PostViewerBlock>\r\n            <Helmet>\r\n                <title>{user.username} - {title}</title>\r\n            </Helmet>\r\n            <PostHead>\r\n                <h1>{title}</h1>\r\n                <SubInfo hasMarginTop username={user.username} publishedDate={publishedDate}/>\r\n                <Tags tags={tags}/>\r\n            </PostHead>\r\n            {actionButtons}\r\n            <PostContent dangerouslySetInnerHTML={{__html: body}}/>\r\n            <CommentListContainer/>\r\n            <EditorContainer/>\r\n        </PostViewerBlock>\r\n    )\r\n}\r\n\r\nexport default PostViewer\r\n","import { createAction, handleActions } from 'redux-actions'\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\r\nimport * as postsAPI from '../lib/api/posts'\r\nimport { takeLatest } from 'redux-saga/effects'\r\n\r\nconst [\r\n    READ_POST,\r\n    READ_POST_SUCCESS,\r\n    READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST')\r\n\r\nconst UNLOAD_POST = 'post/UNLOAD_POST' //포스트 페이지에서 벗어날때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, id => id)\r\nexport const unloadPost = createAction(UNLOAD_POST)\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost)\r\nexport function* postSaga() {\r\n    yield takeLatest(READ_POST, readPostSaga)\r\n}\r\n\r\nconst initialState = {\r\n    post: null,\r\n    error: null,\r\n}\r\n\r\nconst post = handleActions(\r\n    {\r\n        [READ_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [READ_POST_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            error,\r\n        }), \r\n        [UNLOAD_POST]: () => initialState,\r\n    },\r\n    initialState,\r\n)\r\n\r\nexport default post\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport PostActionButtons from '../../components/post/PostActionButtons'\r\nimport PostViewer from '../../components/post/PostViewer'\r\nimport { removePost } from '../../lib/api/posts'\r\nimport { readPost, unloadPost } from '../../modules/post'\r\nimport { setOriginalPost } from '../../modules/write'\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n    //가장 처음 마운트\r\n    const { postId } = match.params;\r\n\tconst dispatch = useDispatch();\r\n\tconst { post, error, loading, user } = useSelector(({ post, loading, user }) => ({\r\n\t\tpost: post.post,\r\n\t\terror: post.error,\r\n        loading: loading['post/READ_POST'],\r\n        user: user.user, \r\n    }));\r\n    \r\n    useEffect(() => {\r\n        dispatch(readPost(postId))\r\n\r\n        //언마운트 => 포스트데이터 삭제\r\n        return () => {\r\n            dispatch(unloadPost())\r\n        }\r\n    }, [dispatch, postId])\r\n\r\n    const onEdit = () => {\r\n        dispatch(setOriginalPost(post))\r\n        history.push('/write')\r\n    }\r\n\r\n    const onRemove = async () => {\r\n        try{\r\n            await removePost(postId)\r\n            history.push('/')\r\n        }catch(e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n\treturn (\r\n        <>\r\n            <PostViewer post={post} loading={loading} error={error} actionButtons={ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove}/>}/>\r\n            \r\n        </>\r\n    )\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from 'react'\r\nimport HeaderContainer from '../components/common/HeaderContainer'\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer'\r\n\r\nconst PostPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostViewerContainer/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostPage\r\n","import './App.css';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Helmet } from 'react-helmet-async';\n\nfunction App() {\n  return (\n    <>\n    <Helmet>\n      <title>사이트 제목</title>\n    </Helmet>\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/@:username/:postId\" /> {/*계정명을 주소 안에 넣을때 @username 의 식으로 사용하기위함*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\r\nimport { all } from 'redux-saga/effects'\r\nimport auth, { authSaga } from './auth'\r\nimport loading from './loading'\r\nimport post, { postSaga } from './post'\r\nimport user, { userSaga } from './user'\r\nimport write, { writeSaga } from './write'\r\nimport posts, { postsSaga } from './posts'\r\nimport comment, {commentSaga} from './comment'\r\nimport comments, {commentsSaga} from './comments'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth, loading, user, write, post, posts, comment, comments\r\n})\r\n\r\nexport function* rootSaga() {\r\n    yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga(), commentSaga(), commentsSaga()])\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer, { rootSaga } from './modules'\nimport { tempSetUser, check } from './modules/user'\nimport { HelmetProvider } from 'react-helmet-async'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)),);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user')\n    if (!user) return //로그인 상태가 아닐 때\n\n    store.dispatch(tempSetUser(user))\n    store.dispatch(check())\n  } catch (e) {\n    console.log('localStorage is not working')\n  }\n}\n\nsagaMiddleware.run(rootSaga)\nloadUser()\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}